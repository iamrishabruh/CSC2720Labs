# Code written and commented by Rishabh Chouhan for Lab 3
# rchouhan2@student.gsu.edu
# 6/21/2024

def swap(arr, i, j):
    # Swaps elements at i and j in array arr
    arr[i], arr[j] = arr[j], arr[i]


def median_of_three(arr, low, mid, high):
    # Finds the median of three elements and swaps it with the high element
    if arr[low] > arr[mid]:
        swap(arr, low, mid)

    if arr[low] > arr[high]:
        swap(arr, low, high)

    if arr[mid] > arr[high]:
        swap(arr, mid, high)

    swap(arr, mid, high)

def partition(arr, low, high):

    # Partition function used in Quick Sort with median of three strategy
    mid = (low + high) // 2
    median_of_three(arr, low, mid, high)
    pivot = arr[high]  # Choosing the median element as the pivot (Learned this in last class)
    i = low - 1  # Pointer for the greater element

    for j in range(low, high):

        if arr[j] < pivot:
            # If element is less than pivot, increment boundary and swap element with boundary
            i += 1
            swap(arr, i, j)

    swap(arr, i + 1, high)
    return i + 1


def quick_sort(arr, low, high):

    # Implements Quick Sort algorithm using median of three strategy (Also learned this in last class)
    if low < high:
        # Partition the array and get the pivot index
        pivot_index = partition(arr, low, high)
        # Recursively sort elements before and after partition
        quick_sort(arr, low, pivot_index - 1)
        quick_sort(arr, pivot_index + 1, high)


def de_duplication(arr):

    # Removes duplicates from sorted array in O(n) time
    if len(arr) == 0 or len(arr) == 1:
        return arr

    index = 0  # For storing index of the next unique element in the array

    for i in range(len(arr) - 1):

        if arr[i] != arr[i + 1]:  # Checking whether the next element is the same or not
            arr[index] = arr[i]
            index += 1

    arr[index] = arr[len(arr) - 1]
    index += 1

    return arr[:index]


def main():
    # All test case initializations
    test_cases = [

        None,  # Null input case
        [],  # Empty array case
        [1],  # Single element case
        [50, 11, 33, 21, 40, 50, 40, 40, 21],  # Regular case
        [3, 3, 3, 3, 3],  # All elements same case
        [5, 4, 3, 2, 1],  # Reverse order case
        [1, 2, 2, 3, 4, 4, 5, 5],  # Mixed duplicates
        list(range(1000, 0, -1)),  # Large reverse sorted array
        [-1, -2, -3, 0, 1, 2, 3, -1, -2, 3],  # Array with negative and positive numbers
        [2 ** 31 - 1, 2 ** 31 - 1, -2 ** 31, -2 ** 31, 0]  # Array with large numbers
    ]

    # Run through all test cases to print and check for validity of program
    for i, test in enumerate(test_cases):

        if test is None:
            print(f"Test case {i + 1}: Input: {test}")
            print("Null input test case, so no output\n")
            continue

        print(f"Test case {i + 1}: Input: {test}")
        arr = test.copy()
        n = len(arr)

        if n > 0:
            quick_sort(arr, 0, n - 1)
            result = de_duplication(arr)
            print(f"Test case {i + 1}: Output: {result}\n")
        else:
            print("Empty array test case, so no output\n")


if __name__ == "__main__":
    main()
