# Code written and commented by Rishabh Chouhan for Lab 6
# rchouhan2@student.gsu.edu
# 7/11/24

from collections import deque

# Class to represent Tree node
class Node:
    # A function to create a new node
    def __init__(self, key):
        self.data = key
        self.left = None
        self.right = None

def level_order_traversal(root):
    if not root:
        return []

    result = []
    queue = deque([root])
    while queue:
        node = queue.popleft()
        result.append(node.data)


        if node.left:
            queue.append(node.left)
        if node.right:
            queue.append(node.right)

    return result
    while queue:
        node = queue.popleft()
        result.append(node.data)

        if node.left:
            queue.append(node.left)
        if node.right:
            queue.append(node.right)

    return result

# Testing the code with the provided sample tree
if __name__ == "__main__":
    root = Node(4)
    root.left = Node(2)
    root.right = Node(6)
    root.left.left = Node(1)
    root.left.right = Node(3)
    root.right.left = Node(5)
    root.right.right = Node(7)
    root.right.right = Node

    # Performing Level Order Traversal
    result = level_order_traversal(root)
    print("Level Order Traversal of the Binary Tree is:")
    print(result)

    # Expected output: 4 2 6 1 3 5 7

# Explanation of Time Complexity:
# The algorithm visits each node exactly once, thus the time complexity is O(n), where n is the number of nodes in the tree.

# Explanation of Space Complexity:
# In the worst-case scenario, the queue will hold all the nodes at the deepest level of the tree, hence the space complexity is O(n).
